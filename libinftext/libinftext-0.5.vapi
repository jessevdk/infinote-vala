/* libinftext-0.5.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "InfText", lower_case_cprefix = "inf_text_")]
namespace InfText {
	[Compact]
	[CCode (cheader_filename = "libinftext-0.5.h")]
	public class BufferIter {
		public static uint get_author (InfText.Buffer buffer, InfText.BufferIter iter);
		public static size_t get_bytes (InfText.Buffer buffer, InfText.BufferIter iter);
		public static uint get_length (InfText.Buffer buffer, InfText.BufferIter iter);
		public static void* get_text (InfText.Buffer buffer, InfText.BufferIter iter);
		public static bool next (InfText.Buffer buffer, InfText.BufferIter iter);
		public static bool prev (InfText.Buffer buffer, InfText.BufferIter iter);
	}
	[Compact]
	[CCode (copy_function = "inf_text_chunk_copy", type_id = "INF_TEXT_TYPE_CHUNK", cheader_filename = "libinftext-0.5.h")]
	public class Chunk {
		[CCode (has_construct_function = false)]
		public Chunk (string encoding);
		public unowned InfText.Chunk copy ();
		public bool equal (InfText.Chunk other);
		public void erase (uint begin, uint length);
		public unowned string get_encoding ();
		public uint get_length ();
		public void* get_text (size_t length);
		public void insert_chunk (uint offset, InfText.Chunk text);
		public void insert_text (uint offset, void* text, size_t bytes, uint length, uint author);
		public unowned InfText.Chunk substring (uint begin, uint length);
	}
	[Compact]
	[CCode (cheader_filename = "libinftext-0.5.h")]
	public class ChunkIter {
		public weak InfText.Chunk chunk;
		public weak GLib.SequenceIter first;
		public weak GLib.SequenceIter second;
		public uint get_author ();
		public size_t get_bytes ();
		public uint get_length ();
		public void* get_text ();
		public bool init (InfText.ChunkIter iter);
		public bool next ();
		public bool prev ();
	}
	[CCode (cheader_filename = "libinftext-0.5.h")]
	public class DefaultBuffer : GLib.Object, Inf.Buffer, InfText.Buffer {
		[CCode (has_construct_function = false)]
		public DefaultBuffer (string encoding);
		[NoAccessorMethod]
		public string encoding { owned get; construct; }
	}
	[CCode (cheader_filename = "libinftext-0.5.h")]
	public class DefaultDeleteOperation : GLib.Object, Inf.AdoptedOperation, InfText.DeleteOperation {
		[CCode (has_construct_function = false)]
		public DefaultDeleteOperation (uint position, InfText.Chunk chunk);
		public unowned InfText.Chunk get_chunk ();
		public InfText.Chunk chunk { get; construct; }
		[NoAccessorMethod]
		public uint position { get; construct; }
	}
	[CCode (cheader_filename = "libinftext-0.5.h")]
	public class DefaultInsertOperation : GLib.Object, Inf.AdoptedOperation, InfText.InsertOperation {
		[CCode (has_construct_function = false)]
		public DefaultInsertOperation (uint pos, InfText.Chunk chunk);
		public unowned InfText.Chunk get_chunk ();
		public InfText.Chunk chunk { get; construct; }
		[NoAccessorMethod]
		public uint position { get; construct; }
	}
	[CCode (cheader_filename = "libinftext-0.5.h")]
	public class MoveOperation : GLib.Object, Inf.AdoptedOperation {
		[CCode (has_construct_function = false)]
		public MoveOperation (uint position, int length);
		public int get_length ();
		public uint get_position ();
		public static void transform_delete (uint delete_position, uint delete_length, uint move_position, int move_length);
		public static void transform_insert (uint insert_position, uint insert_length, uint move_position, int move_length, bool left_gravity);
		public int length { get; construct; }
		public uint position { get; construct; }
	}
	[CCode (cheader_filename = "libinftext-0.5.h")]
	public class RemoteDeleteOperation : GLib.Object, Inf.AdoptedOperation, InfText.DeleteOperation {
		[CCode (has_construct_function = false)]
		public RemoteDeleteOperation (uint position, uint length);
		[NoAccessorMethod]
		public uint length { get; construct; }
		[NoAccessorMethod]
		public uint position { get; construct; }
	}
	[CCode (cheader_filename = "libinftext-0.5.h")]
	public class Session : Inf.AdoptedSession, Inf.CommunicationObject {
		[CCode (has_construct_function = false)]
		public Session (Inf.CommunicationManager manager, InfText.Buffer buffer, Inf.Io io, Inf.SessionStatus status, Inf.CommunicationGroup sync_group, Inf.XmlConnection sync_connection);
		public void flush_requests_for_user (InfText.User user);
		public void set_user_color (InfText.User user, double hue);
		[CCode (has_construct_function = false)]
		public Session.with_user_table (Inf.CommunicationManager manager, InfText.Buffer buffer, Inf.Io io, Inf.UserTable user_table, Inf.SessionStatus status, Inf.CommunicationGroup sync_group, Inf.XmlConnection sync_connection);
		[NoAccessorMethod]
		public uint caret_update_interval { get; set construct; }
	}
	[CCode (cheader_filename = "libinftext-0.5.h")]
	public class UndoGrouping : Inf.AdoptedUndoGrouping {
		[CCode (has_construct_function = false)]
		public UndoGrouping ();
	}
	[CCode (cheader_filename = "libinftext-0.5.h")]
	public class User : Inf.AdoptedUser {
		[CCode (has_construct_function = false)]
		public User (uint id, string name, Inf.AdoptedStateVector vector, double hue);
		public uint get_caret_position ();
		public double get_hue ();
		public int get_selection_length ();
		public void set_selection (uint position, int length, bool by_request);
		[NoAccessorMethod]
		public uint caret_position { get; set construct; }
		[NoAccessorMethod]
		public double hue { get; set construct; }
		[NoAccessorMethod]
		public int selection_length { get; set construct; }
		public virtual signal void selection_changed (uint position, int length, bool by_request);
	}
	[CCode (cheader_filename = "libinftext-0.5.h")]
	public interface Buffer : Inf.Buffer, GLib.Object {
		public abstract unowned InfText.BufferIter create_iter ();
		public abstract void destroy_iter (InfText.BufferIter iter);
		public abstract void erase_text (uint pos, uint len, Inf.User user);
		public abstract unowned string get_encoding ();
		public abstract uint get_length ();
		public abstract unowned InfText.Chunk get_slice (uint pos, uint len);
		public void insert_chunk (uint pos, InfText.Chunk chunk, Inf.User user);
		public abstract void insert_text (uint pos, void* text, size_t bytes, uint len, Inf.User user);
		[NoWrapper]
		public abstract uint iter_get_author (InfText.BufferIter iter);
		[NoWrapper]
		public abstract size_t iter_get_bytes (InfText.BufferIter iter);
		[NoWrapper]
		public abstract uint iter_get_length (InfText.BufferIter iter);
		[NoWrapper]
		public abstract void* iter_get_text (InfText.BufferIter iter);
		[NoWrapper]
		public abstract bool iter_next (InfText.BufferIter iter);
		[NoWrapper]
		public abstract bool iter_prev (InfText.BufferIter iter);
		public void text_erased (uint pos, InfText.Chunk chunk, Inf.User user);
		public void text_inserted (uint pos, InfText.Chunk chunk, Inf.User user);
		public signal void do_text_erased (uint pos, InfText.Chunk chunk, Inf.User user);
		public signal void do_text_inserted (uint pos, InfText.Chunk chunk, Inf.User user);
	}
	[CCode (cheader_filename = "libinftext-0.5.h")]
	public interface DeleteOperation : Inf.AdoptedOperation, GLib.Object {
		public Inf.AdoptedConcurrencyId get_concurrency_id (Inf.AdoptedOperation against);
		public abstract uint get_length ();
		public abstract uint get_position ();
		public bool need_concurrency_id (Inf.AdoptedOperation against);
		public unowned Inf.AdoptedOperation transform_delete (InfText.DeleteOperation against, Inf.AdoptedConcurrencyId cid);
		public unowned Inf.AdoptedOperation transform_insert (InfText.InsertOperation against, Inf.AdoptedConcurrencyId cid);
		[NoWrapper]
		public abstract unowned InfText.DeleteOperation transform_overlap (InfText.DeleteOperation other, uint position, uint begin, uint other_begin, uint length);
		[NoWrapper]
		public abstract unowned InfText.DeleteOperation transform_position (uint position);
		[NoWrapper]
		public abstract unowned Inf.AdoptedSplitOperation transform_split (uint split_pos, uint split_length);
	}
	[CCode (cheader_filename = "libinftext-0.5.h")]
	public interface InsertOperation : Inf.AdoptedOperation, GLib.Object {
		public Inf.AdoptedConcurrencyId get_concurrency_id (Inf.AdoptedOperation against);
		public abstract uint get_length ();
		public abstract uint get_position ();
		public bool need_concurrency_id (Inf.AdoptedOperation against);
		public unowned Inf.AdoptedOperation transform_delete (InfText.DeleteOperation against, Inf.AdoptedConcurrencyId cid);
		public unowned Inf.AdoptedOperation transform_insert (InfText.InsertOperation against, Inf.AdoptedConcurrencyId cid);
		[NoWrapper]
		public abstract unowned InfText.InsertOperation transform_position (uint position);
	}
	[CCode (cprefix = "INF_TEXT_SESSION_ERROR_", has_type_id = false, cheader_filename = "libinftext-0.5.h")]
	public enum SessionError {
		INVALID_HUE,
		FAILED
	}
}
