/* libinfinity-0.5.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Inf", lower_case_cprefix = "inf_")]
namespace Inf {
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class AdoptedAlgorithm : GLib.Object {
		[CCode (has_construct_function = false)]
		public AdoptedAlgorithm (Inf.UserTable user_table, Inf.Buffer buffer);
		public bool can_redo (Inf.AdoptedUser user);
		public bool can_undo (Inf.AdoptedUser user);
		[CCode (has_construct_function = false)]
		public AdoptedAlgorithm.full (Inf.UserTable user_table, Inf.Buffer buffer, uint max_total_log_size);
		public unowned Inf.AdoptedRequest generate_redo (Inf.AdoptedUser user);
		public unowned Inf.AdoptedRequest generate_request (Inf.AdoptedUser user, Inf.AdoptedOperation operation);
		public unowned Inf.AdoptedRequest generate_request_noexec (Inf.AdoptedUser user, Inf.AdoptedOperation operation);
		public unowned Inf.AdoptedRequest generate_undo (Inf.AdoptedUser user);
		public unowned Inf.AdoptedStateVector get_current ();
		public void receive_request (Inf.AdoptedRequest request);
		public unowned Inf.AdoptedRequest translate_request (Inf.AdoptedRequest request, Inf.AdoptedStateVector to);
		[NoAccessorMethod]
		public Inf.Buffer buffer { owned get; construct; }
		[NoAccessorMethod]
		public Inf.AdoptedStateVector buffer_modified_state { owned get; }
		[NoAccessorMethod]
		public Inf.AdoptedStateVector current_state { owned get; }
		[NoAccessorMethod]
		public uint max_total_log_size { get; construct; }
		[NoAccessorMethod]
		public Inf.UserTable user_table { owned get; construct; }
		public virtual signal void apply_request (Inf.AdoptedUser user, Inf.AdoptedRequest request);
		public virtual signal void can_redo_changed (Inf.AdoptedUser user, bool can_redo);
		public virtual signal void can_undo_changed (Inf.AdoptedUser user, bool can_undo);
		public virtual signal void execute_request (Inf.AdoptedUser user, Inf.AdoptedRequest request, bool apply);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class AdoptedNoOperation : GLib.Object, Inf.AdoptedOperation {
		[CCode (has_construct_function = false)]
		public AdoptedNoOperation ();
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class AdoptedRequest : GLib.Object {
		public bool affects_buffer ();
		public unowned Inf.AdoptedRequest copy ();
		[CCode (has_construct_function = false)]
		public AdoptedRequest.@do (Inf.AdoptedStateVector vector, uint user_id, Inf.AdoptedOperation operation);
		public unowned Inf.AdoptedRequest fold (uint into, uint by);
		public Inf.AdoptedConcurrencyId get_concurrency_id (Inf.AdoptedRequest against);
		public unowned Inf.AdoptedOperation get_operation ();
		public Inf.AdoptedRequestType get_request_type ();
		public uint get_user_id ();
		public unowned Inf.AdoptedStateVector get_vector ();
		public unowned Inf.AdoptedRequest mirror (uint by);
		public bool need_concurrency_id (Inf.AdoptedRequest against);
		[CCode (has_construct_function = false)]
		public AdoptedRequest.redo (Inf.AdoptedStateVector vector, uint user_id);
		public unowned Inf.AdoptedRequest transform (Inf.AdoptedRequest against, Inf.AdoptedConcurrencyId concurrency_id);
		[CCode (has_construct_function = false)]
		public AdoptedRequest.undo (Inf.AdoptedStateVector vector, uint user_id);
		public Inf.AdoptedOperation operation { get; construct; }
		[NoAccessorMethod]
		public Inf.AdoptedRequestType type { get; construct; }
		public uint user_id { get; construct; }
		public Inf.AdoptedStateVector vector { get; construct; }
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class AdoptedRequestLog : GLib.Object {
		[CCode (has_construct_function = false)]
		public AdoptedRequestLog (uint user_id);
		public void add_request (Inf.AdoptedRequest request);
		public uint get_begin ();
		public uint get_end ();
		public unowned Inf.AdoptedRequest get_request (uint n);
		public uint get_user_id ();
		public bool is_empty ();
		public unowned Inf.AdoptedRequest next_associated (Inf.AdoptedRequest request);
		public unowned Inf.AdoptedRequest original_request (Inf.AdoptedRequest request);
		public unowned Inf.AdoptedRequest prev_associated (Inf.AdoptedRequest request);
		public void remove_requests (uint up_to);
		public void set_begin (uint n);
		public unowned Inf.AdoptedRequest upper_related (uint n);
		public uint begin { get; construct; }
		public uint end { get; }
		[NoAccessorMethod]
		public Inf.AdoptedRequest next_redo { owned get; }
		[NoAccessorMethod]
		public Inf.AdoptedRequest next_undo { owned get; }
		public uint user_id { get; construct; }
		public virtual signal void do_add_request (Inf.AdoptedRequest request);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class AdoptedSession : Inf.Session, Inf.CommunicationObject {
		public void broadcast_request (Inf.AdoptedRequest request);
		public unowned Inf.AdoptedAlgorithm get_algorithm ();
		public unowned Inf.Io get_io ();
		public bool read_request_info (Xml.Node xml, Inf.AdoptedStateVector diff_vec, out unowned Inf.AdoptedUser user, out unowned Inf.AdoptedStateVector time, out unowned Xml.Node operation) throws GLib.Error;
		public void redo (Inf.AdoptedUser user, uint n);
		[NoWrapper]
		public virtual void request_to_xml (Xml.Node xml, Inf.AdoptedRequest request, Inf.AdoptedStateVector diff_vec, bool for_sync);
		public void undo (Inf.AdoptedUser user, uint n);
		public void write_request_info (Inf.AdoptedRequest request, Inf.AdoptedStateVector diff_vec, Xml.Node xml, Xml.Node operation);
		[NoWrapper]
		public virtual unowned Inf.AdoptedRequest xml_to_request (Xml.Node xml, Inf.AdoptedStateVector diff_vec, bool for_sync) throws GLib.Error;
		public Inf.AdoptedAlgorithm algorithm { get; }
		public Inf.Io io { get; construct; }
		[NoAccessorMethod]
		public uint max_total_log_size { get; construct; }
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class AdoptedSessionRecord : GLib.Object {
		[CCode (has_construct_function = false)]
		public AdoptedSessionRecord (Inf.AdoptedSession session);
		public bool is_recording ();
		public bool start_recording (string filename) throws GLib.Error;
		public bool stop_recording () throws GLib.Error;
		[NoAccessorMethod]
		public Inf.AdoptedSession session { owned get; construct; }
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class AdoptedSessionReplay : GLib.Object {
		[CCode (has_construct_function = false)]
		public AdoptedSessionReplay ();
		public unowned Inf.AdoptedSession get_session ();
		public bool play_next () throws GLib.Error;
		public bool play_to_end () throws GLib.Error;
		public bool set_record (string filename, Inf.cNotePlugin plugin) throws GLib.Error;
		[NoAccessorMethod]
		public string filename { owned get; }
		public Inf.AdoptedSession session { get; }
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class AdoptedSplitOperation : GLib.Object, Inf.AdoptedOperation {
		[CCode (has_construct_function = false)]
		public AdoptedSplitOperation (Inf.AdoptedOperation first, Inf.AdoptedOperation second);
		public unowned Inf.AdoptedOperation transform_other (Inf.AdoptedOperation other, int concurrency_id);
		public unowned GLib.SList unsplit ();
		[NoAccessorMethod]
		public Inf.AdoptedOperation first { owned get; construct; }
		[NoAccessorMethod]
		public Inf.AdoptedOperation second { owned get; construct; }
	}
	[Compact]
	[CCode (copy_function = "inf_adopted_state_vector_copy", type_id = "INF_TYPE_ADOPTED_STATE_VECTOR", cheader_filename = "libinfinity-0.5.h")]
	public class AdoptedStateVector {
		[CCode (has_construct_function = false)]
		public AdoptedStateVector ();
		public void add (uint id, int value);
		public bool causally_before (Inf.AdoptedStateVector second);
		public bool causally_before_inc (Inf.AdoptedStateVector second, uint inc_component);
		public int compare (Inf.AdoptedStateVector second);
		public unowned Inf.AdoptedStateVector copy ();
		public static GLib.Quark error_quark ();
		public void @foreach (Inf.AdoptedStateVectorForeachFunc func);
		public static unowned Inf.AdoptedStateVector from_string (string str) throws GLib.Error;
		public static unowned Inf.AdoptedStateVector from_string_diff (string str, Inf.AdoptedStateVector orig) throws GLib.Error;
		public uint @get (uint id);
		public void @set (uint id, uint value);
		public unowned string to_string ();
		public unowned string to_string_diff (Inf.AdoptedStateVector orig);
		public uint vdiff (Inf.AdoptedStateVector second);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class AdoptedUndoGrouping : GLib.Object {
		[CCode (has_construct_function = false)]
		public AdoptedUndoGrouping ();
		public void end_group (bool allow_group_with_next);
		public unowned Inf.AdoptedAlgorithm get_algorithm ();
		public uint get_redo_size ();
		public uint get_undo_size ();
		public void set_algorithm (Inf.AdoptedAlgorithm algorithm, Inf.AdoptedUser user);
		public void start_group (bool allow_group_with_prev);
		public Inf.AdoptedAlgorithm algorithm { get; set; }
		[NoAccessorMethod]
		public Inf.AdoptedUser user { owned get; set; }
		public virtual signal bool group_requests (Inf.AdoptedRequest first, Inf.AdoptedRequest second);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class AdoptedUser : Inf.User {
		public uint get_component (uint id);
		public unowned Inf.AdoptedRequestLog get_request_log ();
		public unowned Inf.AdoptedStateVector get_vector ();
		public void set_vector (Inf.AdoptedStateVector vec);
		public Inf.AdoptedRequestLog request_log { get; construct; }
		public Inf.AdoptedStateVector vector { get; set; }
	}
	[Compact]
	[CCode (ref_function = "inf_certificate_chain_ref", unref_function = "inf_certificate_chain_unref", type_id = "INF_TYPE_CERTIFICATE_CHAIN", cheader_filename = "libinfinity-0.5.h")]
	public class CertificateChain {
	}
	[Compact]
	[CCode (ref_function = "inf_certificate_credentials_ref", unref_function = "inf_certificate_credentials_unref", type_id = "INF_TYPE_CERTIFICATE_CREDENTIALS", cheader_filename = "libinfinity-0.5.h")]
	public class CertificateCredentials {
		[CCode (has_construct_function = false)]
		public CertificateCredentials ();
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class ChatBuffer : GLib.Object, Inf.Buffer {
		[CCode (has_construct_function = false)]
		public ChatBuffer (uint size);
		public void add_emote_message (Inf.User by, string message, size_t length, ulong time, Inf.ChatBufferMessageFlags flags);
		public void add_message (Inf.User by, string message, size_t length, ulong time, Inf.ChatBufferMessageFlags flags);
		public void add_userjoin_message (Inf.User user, ulong time, Inf.ChatBufferMessageFlags flags);
		public void add_userpart_message (Inf.User user, ulong time, Inf.ChatBufferMessageFlags flags);
		public unowned Inf.ChatBufferMessage get_message (uint n);
		public uint get_n_messages ();
		public uint get_size ();
		public uint size { get; construct; }
		public virtual signal void do_add_message (Inf.ChatBufferMessage message);
	}
	[Compact]
	[CCode (copy_function = "inf_chat_buffer_message_copy", type_id = "INF_TYPE_CHAT_BUFFER_MESSAGE", cheader_filename = "libinfinity-0.5.h")]
	public class ChatBufferMessage {
		public Inf.ChatBufferMessageFlags flags;
		public size_t length;
		public weak string text;
		public ulong time;
		public Inf.ChatBufferMessageType type;
		public weak Inf.User user;
		public unowned Inf.ChatBufferMessage copy ();
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class ChatSession : Inf.Session, Inf.CommunicationObject {
		[CCode (has_construct_function = false)]
		public ChatSession (Inf.CommunicationManager manager, uint backlog_size, Inf.SessionStatus status, Inf.CommunicationGroup sync_group, Inf.XmlConnection sync_connection);
		public bool set_log_file (string log_file) throws GLib.Error;
		[NoAccessorMethod]
		public string log_file { owned get; set; }
		public virtual signal void receive_message (Inf.ChatBufferMessage message);
		public virtual signal void send_message (Inf.ChatBufferMessage message);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class CommunicationCentralFactory : GLib.Object, Inf.CommunicationFactory {
		public static unowned Inf.CommunicationFactory get_default ();
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class CommunicationCentralMethod : GLib.Object, Inf.CommunicationMethod {
		[NoAccessorMethod]
		public Inf.CommunicationGroup group { owned get; construct; }
		[NoAccessorMethod]
		public Inf.CommunicationRegistry registry { owned get; construct; }
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class CommunicationGroup : GLib.Object {
		public void cancel_messages (Inf.XmlConnection connection);
		[NoWrapper]
		public virtual unowned string get_method (uint index);
		public unowned string get_method_for_connection (Inf.XmlConnection conn);
		public unowned string get_method_for_network (string network);
		public unowned string get_name ();
		public virtual unowned string get_publisher_id (Inf.XmlConnection for_connection);
		public unowned Inf.CommunicationObject get_target ();
		public bool is_member (Inf.XmlConnection connection);
		public void send_group_message (Xml.Node xml);
		public void send_message (Inf.XmlConnection connection, Xml.Node xml);
		public void set_target (Inf.CommunicationObject target);
		public Inf.CommunicationManager communication_manager { construct; }
		public Inf.CommunicationRegistry communication_registry { construct; }
		public string name { get; construct; }
		public Inf.CommunicationObject target { get; set; }
		public virtual signal void member_added (Inf.XmlConnection connection);
		public virtual signal void member_removed (Inf.XmlConnection connection);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class CommunicationHostedGroup : Inf.CommunicationGroup {
		public void add_member (Inf.XmlConnection connection);
		public void add_method (string method);
		public void remove_member (Inf.XmlConnection connection);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class CommunicationJoinedGroup : Inf.CommunicationGroup {
		public unowned Inf.XmlConnection get_publisher ();
		public void remove_member (Inf.XmlConnection connection);
		[NoAccessorMethod]
		public string method { owned get; construct; }
		public Inf.XmlConnection publisher { get; construct; }
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class CommunicationManager : GLib.Object {
		[CCode (has_construct_function = false)]
		public CommunicationManager ();
		public void add_factory (Inf.CommunicationFactory factory);
		public unowned Inf.CommunicationFactory get_factory_for (string network, string method_name);
		public unowned Inf.CommunicationJoinedGroup join_group (string group_name, Inf.XmlConnection publisher_conn, string method);
		public unowned Inf.CommunicationHostedGroup open_group (string group_name, string methods);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class CommunicationRegistry : GLib.Object {
		public void cancel_messages (Inf.CommunicationGroup group, Inf.XmlConnection connection);
		public bool is_registered (Inf.CommunicationGroup group, Inf.XmlConnection connection);
		public void register (Inf.CommunicationGroup group, Inf.CommunicationMethod method, Inf.XmlConnection connection);
		public void send (Inf.CommunicationGroup group, Inf.XmlConnection connection, Xml.Node xml);
		public void unregister (Inf.CommunicationGroup group, Inf.XmlConnection connection);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class DiscoveryAvahi : GLib.Object, Inf.Discovery, Inf.LocalPublisher {
		[CCode (has_construct_function = false)]
		public DiscoveryAvahi (Inf.Io io, Inf.XmppManager manager, Inf.CertificateCredentials creds, Gsasl.Context sasl_context, string sasl_mechanisms);
		public Inf.XmppConnectionSecurityPolicy get_security_policy ();
		public void set_security_policy (Inf.XmppConnectionSecurityPolicy plcy);
		[NoAccessorMethod]
		public Inf.CertificateCredentials credentials { owned get; set construct; }
		[NoAccessorMethod]
		public Inf.Io io { owned get; construct; }
		[NoAccessorMethod]
		public void* sasl_context { get; set construct; }
		[NoAccessorMethod]
		public string sasl_mechanisms { owned get; set construct; }
		public Inf.XmppConnectionSecurityPolicy security_policy { get; set; }
		[NoAccessorMethod]
		public Inf.XmppManager xmpp_manager { owned get; construct; }
	}
	[Compact]
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class DiscoveryInfo {
		public static unowned string get_service_name (Inf.Discovery discovery, Inf.DiscoveryInfo info);
		public static unowned string get_service_type (Inf.Discovery discovery, Inf.DiscoveryInfo info);
	}
	[Compact]
	[CCode (copy_function = "inf_ip_address_copy", type_id = "INF_TYPE_IP_ADDRESS", cheader_filename = "libinfinity-0.5.h")]
	public class IpAddress {
		public int collate (Inf.IpAddress address2);
		public unowned Inf.IpAddress copy ();
		[CCode (has_construct_function = false)]
		public IpAddress.from_string (string str);
		public Inf.IpAddressFamily get_family ();
		public void* get_raw ();
		[CCode (has_construct_function = false)]
		public IpAddress.loopback4 ();
		[CCode (has_construct_function = false)]
		public IpAddress.loopback6 ();
		[CCode (has_construct_function = false)]
		public IpAddress.raw4 (uint32 address);
		[CCode (has_construct_function = false)]
		public IpAddress.raw6 (uchar[] address);
		public unowned string to_string ();
	}
	[Compact]
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class LocalPublisherItem {
	}
	[Compact]
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class NativeSocket {
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class Session : GLib.Object, Inf.CommunicationObject {
		public unowned Inf.User add_user (GLib.Parameter[] @params) throws GLib.Error;
		public void close ();
		public unowned Inf.Buffer get_buffer ();
		public unowned Inf.CommunicationManager get_communication_manager ();
		public Inf.SessionStatus get_status ();
		public unowned Inf.CommunicationGroup get_subscription_group ();
		public double get_synchronization_progress (Inf.XmlConnection connection);
		public Inf.SessionSyncStatus get_synchronization_status (Inf.XmlConnection connection);
		public static GLib.Parameter get_user_property (GLib.Array array, string name);
		public unowned Inf.UserTable get_user_table ();
		[NoWrapper]
		public virtual unowned GLib.Array get_xml_user_props (Inf.XmlConnection conn, Xml.Node xml);
		public bool has_synchronizations ();
		public static GLib.Parameter lookup_user_property (GLib.Parameter[] @params, string name);
		[NoWrapper]
		public virtual Inf.CommunicationScope process_xml_run (Inf.XmlConnection connection, Xml.Node xml) throws GLib.Error;
		[NoWrapper]
		public virtual bool process_xml_sync (Inf.XmlConnection connection, Xml.Node xml) throws GLib.Error;
		public void send_to_subscriptions (Xml.Node xml);
		public void set_subscription_group (Inf.CommunicationGroup group);
		public void set_user_status (Inf.User user, Inf.UserStatus status);
		[NoWrapper]
		public virtual void set_xml_user_props (GLib.Parameter[] @params, Xml.Node xml);
		public void synchronize_from ();
		public void synchronize_to (Inf.CommunicationGroup group, Inf.XmlConnection connection);
		[NoWrapper]
		public virtual void to_xml_sync (Xml.Node parent);
		[NoWrapper]
		public virtual unowned Inf.User user_new (GLib.Parameter[] @params);
		public void user_to_xml (Inf.User user, Xml.Node xml);
		[NoWrapper]
		public virtual bool validate_user_props (GLib.Parameter[] @params, Inf.User exclude) throws GLib.Error;
		public Inf.Buffer buffer { get; construct; }
		public Inf.CommunicationManager communication_manager { get; construct; }
		public Inf.SessionStatus status { get; construct; }
		public Inf.CommunicationGroup subscription_group { get; set; }
		[NoAccessorMethod]
		public Inf.XmlConnection sync_connection { owned get; construct; }
		[NoAccessorMethod]
		public Inf.CommunicationGroup sync_group { owned get; construct; }
		public Inf.UserTable user_table { get; construct; }
		public virtual signal void do_close ();
		public virtual signal void synchronization_begin (Inf.CommunicationGroup group, Inf.XmlConnection connection);
		public virtual signal void synchronization_complete (Inf.XmlConnection connection);
		public virtual signal void synchronization_failed (Inf.XmlConnection connection, void* error);
		public virtual signal void synchronization_progress (Inf.XmlConnection connection, double percentage);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class SimulatedConnection : GLib.Object, Inf.XmlConnection {
		[CCode (has_construct_function = false)]
		public SimulatedConnection ();
		public void connect (Inf.SimulatedConnection to);
		public void flush ();
		public void set_mode (Inf.SimulatedConnectionMode mode);
		[NoAccessorMethod]
		public Inf.SimulatedConnectionMode mode { get; set construct; }
		[NoAccessorMethod]
		public Inf.SimulatedConnection target { owned get; set; }
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class StandaloneIo : GLib.Object, Inf.Io {
		[CCode (has_construct_function = false)]
		public StandaloneIo ();
		public void iteration ();
		public void iteration_timeout (uint timeout);
		public void loop ();
		public void loop_quit ();
		public bool loop_running ();
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class TcpConnection : GLib.Object {
		[CCode (has_construct_function = false)]
		public TcpConnection (Inf.Io io, Inf.IpAddress remote_addr, uint remote_port);
		[CCode (has_construct_function = false)]
		public TcpConnection.and_open (Inf.Io io, Inf.IpAddress remote_addr, uint remote_port) throws GLib.Error;
		public void close ();
		public unowned Inf.IpAddress get_remote_address ();
		public uint get_remote_port ();
		public bool open () throws GLib.Error;
		public void send (void* data, uint len);
		[NoAccessorMethod]
		public uint device_index { get; set; }
		[NoAccessorMethod]
		public string device_name { owned get; set; }
		[NoAccessorMethod]
		public Inf.Io io { owned get; construct; }
		[NoAccessorMethod]
		public Inf.IpAddress local_address { owned get; }
		[NoAccessorMethod]
		public uint local_port { get; }
		[NoAccessorMethod]
		public Inf.IpAddress remote_address { owned get; set; }
		[NoAccessorMethod]
		public uint remote_port { get; set; }
		[NoAccessorMethod]
		public Inf.TcpConnectionStatus status { get; }
		public virtual signal void error (void* error);
		public virtual signal void received (void* data, uint len);
		public virtual signal void sent (void* data, uint len);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class User : GLib.Object {
		public static GLib.Quark error_quark ();
		public unowned Inf.XmlConnection get_connection ();
		public Inf.UserFlags get_flags ();
		public uint get_id ();
		public unowned string get_name ();
		public Inf.UserStatus get_status ();
		public static bool status_from_string (string str, Inf.UserStatus status) throws GLib.Error;
		public static unowned string status_to_string (Inf.UserStatus status);
		public static unowned string strerror (Inf.UserError code);
		[NoAccessorMethod]
		public Inf.XmlConnection connection { owned get; set; }
		[NoAccessorMethod]
		public Inf.UserFlags flags { get; set; }
		public uint id { get; construct; }
		[NoAccessorMethod]
		public string name { owned get; set; }
		[NoAccessorMethod]
		public Inf.UserStatus status { get; set; }
		public virtual signal void set_status (Inf.UserStatus status);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class UserTable : GLib.Object {
		[CCode (has_construct_function = false)]
		public UserTable ();
		public void add_user (Inf.User user);
		public void foreach_local_user (Inf.UserTableForeachUserFunc func);
		public void foreach_user (Inf.UserTableForeachUserFunc func);
		public unowned Inf.User lookup_user_by_id (uint id);
		public unowned Inf.User lookup_user_by_name (string name);
		public void remove_user (Inf.User user);
		public virtual signal void add_local_user (Inf.User user);
		public virtual signal void do_add_user (Inf.User user);
		public virtual signal void do_remove_user (Inf.User user);
		public virtual signal void remove_local_user (Inf.User user);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class XmppConnection : GLib.Object, Inf.XmlConnection {
		[CCode (has_construct_function = false)]
		public XmppConnection (Inf.TcpConnection tcp, Inf.XmppConnectionSite site, string local_hostname, string remote_hostname, Inf.XmppConnectionSecurityPolicy security_policy, Inf.CertificateCredentials creds, Gsasl.Context sasl_context, string sasl_mechanisms);
		public void certificate_verify_cancel ();
		public void certificate_verify_continue ();
		public unowned GLib.Error get_sasl_error ();
		public bool get_tls_enabled ();
		public void reset_sasl_authentication (Gsasl.Context new_context, string new_mechanisms);
		public bool retry_sasl_authentication () throws GLib.Error;
		public void set_certificate_callback (Inf.XmppConnectionCrtCallback cb);
		public void set_sasl_error (GLib.Error error);
		[NoAccessorMethod]
		public Inf.CertificateCredentials credentials { owned get; construct; }
		[NoAccessorMethod]
		public string local_hostname { owned get; construct; }
		[NoAccessorMethod]
		public string remote_hostname { owned get; construct; }
		[NoAccessorMethod]
		public void* sasl_context { get; construct; }
		[NoAccessorMethod]
		public string sasl_mechanisms { owned get; construct; }
		[NoAccessorMethod]
		public Inf.XmppConnectionSecurityPolicy security_policy { get; construct; }
		[NoAccessorMethod]
		public Inf.XmppConnectionSite site { get; construct; }
		[NoAccessorMethod]
		public Inf.TcpConnection tcp_connection { owned get; construct; }
		public bool tls_enabled { get; }
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class XmppManager : GLib.Object {
		[CCode (has_construct_function = false)]
		public XmppManager ();
		public void add_connection (Inf.XmppConnection connection);
		public bool contains_connection (Inf.XmppConnection connection);
		public unowned Inf.XmppConnection lookup_connection_by_address (Inf.IpAddress address, uint port);
		public void remove_connection (Inf.XmppConnection connection);
		public virtual signal void do_add_connection (Inf.XmppConnection connection);
		public virtual signal void do_remove_connection (Inf.XmppConnection connection);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class cBrowser : GLib.Object, Inf.CommunicationObject {
		[CCode (cname = "infc_browser_new", has_construct_function = false)]
		public cBrowser (Inf.Io io, Inf.CommunicationManager comm_manager, Inf.XmlConnection connection);
		[CCode (cname = "infc_browser_add_note")]
		public unowned Inf.cNodeRequest add_note (Inf.cBrowserIter parent, string name, Inf.cNotePlugin plugin, bool initial_subscribe);
		[CCode (cname = "infc_browser_add_note_with_content")]
		public unowned Inf.cNodeRequest add_note_with_content (Inf.cBrowserIter parent, string name, Inf.cNotePlugin plugin, Inf.Session session, bool initial_subscribe);
		[CCode (cname = "infc_browser_add_plugin")]
		public bool add_plugin (Inf.cNotePlugin plugin);
		[CCode (cname = "infc_browser_add_subdirectory")]
		public unowned Inf.cNodeRequest add_subdirectory (Inf.cBrowserIter parent, string name);
		[CCode (cname = "infc_browser_get_chat_session")]
		public unowned Inf.cSessionProxy get_chat_session ();
		[CCode (cname = "infc_browser_get_communication_manager")]
		public unowned Inf.CommunicationManager get_communication_manager ();
		[CCode (cname = "infc_browser_get_connection")]
		public unowned Inf.XmlConnection get_connection ();
		[CCode (cname = "infc_browser_get_status")]
		public Inf.cBrowserStatus get_status ();
		[CCode (cname = "infc_browser_get_subscribe_chat_request")]
		public unowned Inf.cNodeRequest get_subscribe_chat_request ();
		[CCode (cname = "infc_browser_lookup_plugin")]
		public unowned Inf.cNotePlugin lookup_plugin (string note_type);
		[CCode (cname = "infc_browser_remove_node")]
		public unowned Inf.cNodeRequest remove_node (Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_subscribe_chat")]
		public unowned Inf.cNodeRequest subscribe_chat ();
		public Inf.cSessionProxy chat_session { get; }
		public Inf.CommunicationManager communication_manager { get; construct; }
		public Inf.XmlConnection connection { get; construct; }
		[NoAccessorMethod]
		public Inf.Io io { owned get; construct; }
		public Inf.cBrowserStatus status { get; }
		public virtual signal void begin_explore (Inf.cBrowserIter iter, Inf.cExploreRequest request);
		public virtual signal void begin_subscribe (Inf.cBrowserIter iter, Inf.cNodeRequest request);
		public virtual signal void error (void* error);
		public virtual signal void node_added (Inf.cBrowserIter iter);
		public virtual signal void node_removed (Inf.cBrowserIter iter);
		public virtual signal void subscribe_session (Inf.cBrowserIter iter, Inf.cSessionProxy proxy);
	}
	[Compact]
	[CCode (copy_function = "infc_browser_iter_copy", free_function = "infc_browser_iter_free", type_id = "INF_TYPE_CBROWSER_ITER", cheader_filename = "libinfinity-0.5.h")]
	public class cBrowserIter {
		public void* node;
		public uint node_id;
		[CCode (cname = "infc_browser_iter_copy")]
		public unowned Inf.cBrowserIter copy ();
		[CCode (cname = "infc_browser_iter_explore")]
		public static unowned Inf.cExploreRequest explore (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_from_explore_request")]
		public static bool from_explore_request (Inf.cBrowser browser, Inf.cExploreRequest request, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_from_node_request")]
		public static bool from_node_request (Inf.cBrowser browser, Inf.cNodeRequest request, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_child")]
		public static bool get_child (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_explore_request")]
		public static unowned Inf.cExploreRequest get_explore_request (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_explored")]
		public static bool get_explored (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_name")]
		public static unowned string get_name (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_next")]
		public static bool get_next (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_note_type")]
		public static unowned string get_note_type (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_parent")]
		public static bool get_parent (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_path")]
		public static unowned string get_path (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_plugin")]
		public static unowned Inf.cNotePlugin get_plugin (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_prev")]
		public static bool get_prev (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_root")]
		public static void get_root (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_session")]
		public static unowned Inf.cSessionProxy get_session (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_subscribe_request")]
		public static unowned Inf.cNodeRequest get_subscribe_request (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_sync_in")]
		public static unowned Inf.cSessionProxy get_sync_in (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_get_sync_in_requests")]
		public static unowned GLib.SList get_sync_in_requests (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_is_subdirectory")]
		public static bool is_subdirectory (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_is_valid")]
		public static bool is_valid (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_save_session")]
		public static unowned Inf.cNodeRequest save_session (Inf.cBrowser browser, Inf.cBrowserIter iter);
		[CCode (cname = "infc_browser_iter_subscribe_session")]
		public static unowned Inf.cNodeRequest subscribe_session (Inf.cBrowser browser, Inf.cBrowserIter iter);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class cExploreRequest : Inf.cRequest {
		[CCode (cname = "infc_explore_request_get_finished")]
		public bool get_finished ();
		[CCode (cname = "infc_explore_request_get_initiated")]
		public bool get_initiated ();
		[CCode (cname = "infc_explore_request_get_node_id")]
		public uint get_node_id ();
		[CCode (cname = "infc_explore_request_progress")]
		public bool progress () throws GLib.Error;
		[NoAccessorMethod]
		public uint current { get; set; }
		public bool finished { get; }
		public bool initiated { get; }
		public uint node_id { get; construct; }
		[NoAccessorMethod]
		public uint total { get; set; }
		public virtual signal void do_finished ();
		public virtual signal void do_initiated (uint total);
		public virtual signal void do_progress (uint current, uint total);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class cNodeRequest : Inf.cRequest {
		[CCode (cname = "infc_node_request_finished")]
		public void finished (Inf.cBrowserIter iter);
		[NoAccessorMethod]
		public uint node_id { get; construct; }
		public virtual signal void do_finished (Inf.cBrowserIter iter);
	}
	[Compact]
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class cNotePlugin {
		public weak string note_type;
		public weak GLib.Callback session_new;
		public void* user_data;
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class cRequest : GLib.Object {
		[CCode (cname = "infc_request_failed")]
		public void failed (GLib.Error error);
		[CCode (cname = "infc_request_get_name")]
		public unowned string get_name ();
		[CCode (cname = "infc_request_get_seq")]
		public uint get_seq ();
		[NoWrapper]
		public virtual void unused1 ();
		[NoWrapper]
		public virtual void usused2 ();
		public string name { get; construct; }
		public uint seq { get; construct; }
		public virtual signal void do_failed (void* error);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class cRequestManager : GLib.Object {
		[CCode (cname = "infc_request_manager_new", has_construct_function = false)]
		public cRequestManager (uint seq_id);
		[CCode (cname = "infc_request_manager_add_request")]
		public unowned Inf.cRequest add_request (GLib.Type request_type, string request_name, ...);
		[CCode (cname = "infc_request_manager_add_request_valist")]
		public unowned Inf.cRequest add_request_valist (GLib.Type request_type, string request_name, string first_property_name, void* arglist);
		[CCode (cname = "infc_request_manager_clear")]
		public void clear ();
		[CCode (cname = "infc_request_manager_fail_request")]
		public void fail_request (Inf.cRequest request, GLib.Error error);
		[CCode (cname = "infc_request_manager_foreach_named_request")]
		public void foreach_named_request (string name, Inf.cRequestManagerForeachFunc func);
		[CCode (cname = "infc_request_manager_foreach_request")]
		public void foreach_request (Inf.cRequestManagerForeachFunc func);
		[CCode (cname = "infc_request_manager_get_request_by_seq")]
		public unowned Inf.cRequest get_request_by_seq (uint seq);
		[CCode (cname = "infc_request_manager_get_request_by_xml")]
		public unowned Inf.cRequest get_request_by_xml (string name, Xml.Node xml) throws GLib.Error;
		[CCode (cname = "infc_request_manager_get_request_by_xml_required")]
		public unowned Inf.cRequest get_request_by_xml_required (string name, Xml.Node xml) throws GLib.Error;
		[CCode (cname = "infc_request_manager_remove_request")]
		public void remove_request (Inf.cRequest request);
		[NoAccessorMethod]
		public uint sequence_id { get; construct; }
		public virtual signal void request_add (Inf.cRequest request);
		public virtual signal void request_remove (Inf.cRequest request);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class cSessionProxy : GLib.Object, Inf.CommunicationObject {
		[CCode (cname = "infc_session_proxy_get_connection")]
		public unowned Inf.XmlConnection get_connection ();
		[CCode (cname = "infc_session_proxy_get_session")]
		public unowned Inf.Session get_session ();
		[CCode (cname = "infc_session_proxy_get_subscription_group")]
		public unowned Inf.CommunicationJoinedGroup get_subscription_group ();
		[CCode (cname = "infc_session_proxy_join_user")]
		public unowned Inf.cUserRequest join_user (GLib.Parameter[] @params) throws GLib.Error;
		[CCode (cname = "infc_session_proxy_set_connection")]
		public void set_connection (Inf.CommunicationJoinedGroup group, Inf.XmlConnection connection, uint seq_id);
		[NoWrapper]
		public virtual unowned GLib.Error translate_error (GLib.Quark domain, uint code);
		public Inf.XmlConnection connection { get; }
		public Inf.Session session { get; construct; }
		public Inf.CommunicationJoinedGroup subscription_group { get; }
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class cUserRequest : Inf.cRequest {
		[CCode (cname = "infc_user_request_finished")]
		public void finished (Inf.User user);
		public virtual signal void do_finished (Inf.User user);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class dDirectory : GLib.Object, Inf.CommunicationObject {
		[CCode (cname = "infd_directory_new", has_construct_function = false)]
		public dDirectory (Inf.Io io, Inf.dStorage storage, Inf.CommunicationManager comm_manager);
		[CCode (cname = "infd_directory_add_connection")]
		public bool add_connection (Inf.XmlConnection connection);
		[CCode (cname = "infd_directory_add_note")]
		public bool add_note (Inf.dDirectoryIter parent, string name, Inf.dNotePlugin plugin, Inf.dDirectoryIter iter) throws GLib.Error;
		[CCode (cname = "infd_directory_add_plugin")]
		public bool add_plugin (Inf.dNotePlugin plugin);
		[CCode (cname = "infd_directory_add_subdirectory")]
		public bool add_subdirectory (Inf.dDirectoryIter parent, string name, Inf.dDirectoryIter iter) throws GLib.Error;
		[CCode (cname = "infd_directory_enable_chat")]
		public void enable_chat (bool enable);
		[CCode (cname = "infd_directory_foreach_connection")]
		public void foreach_connection (Inf.dDirectoryForeachConnectionFunc func);
		[CCode (cname = "infd_directory_get_chat_session")]
		public unowned Inf.dSessionProxy get_chat_session ();
		[CCode (cname = "infd_directory_get_communication_manager")]
		public unowned Inf.CommunicationManager get_communication_manager ();
		[CCode (cname = "infd_directory_get_io")]
		public unowned Inf.Io get_io ();
		[CCode (cname = "infd_directory_get_storage")]
		public unowned Inf.dStorage get_storage ();
		[CCode (cname = "infd_directory_lookup_plugin")]
		public unowned Inf.dNotePlugin lookup_plugin (string note_type);
		[CCode (cname = "infd_directory_remove_node")]
		public bool remove_node (Inf.dDirectoryIter iter) throws GLib.Error;
		public Inf.dSessionProxy chat_session { get; }
		public Inf.CommunicationManager communication_manager { get; construct; }
		public Inf.Io io { get; construct; }
		[NoAccessorMethod]
		public Inf.dStorage storage { owned get; set construct; }
		public virtual signal void add_session (Inf.dDirectoryIter iter, Inf.dSessionProxy session);
		public virtual signal void node_added (Inf.dDirectoryIter iter);
		public virtual signal void node_removed (Inf.dDirectoryIter iter);
		public virtual signal void remove_session (Inf.dDirectoryIter iter, Inf.dSessionProxy session);
	}
	[Compact]
	[CCode (copy_function = "infd_directory_iter_copy", free_function = "infd_directory_iter_free", type_id = "INF_TYPE_DDIRECTORY_ITER", cheader_filename = "libinfinity-0.5.h")]
	public class dDirectoryIter {
		public void* node;
		public uint node_id;
		[CCode (cname = "infd_directory_iter_copy")]
		public unowned Inf.dDirectoryIter copy ();
		[CCode (cname = "infd_directory_iter_get_child")]
		public static bool get_child (Inf.dDirectory directory, Inf.dDirectoryIter iter) throws GLib.Error;
		[CCode (cname = "infd_directory_iter_get_explored")]
		public static bool get_explored (Inf.dDirectory directory, Inf.dDirectoryIter iter);
		[CCode (cname = "infd_directory_iter_get_name")]
		public static unowned string get_name (Inf.dDirectory directory, Inf.dDirectoryIter iter);
		[CCode (cname = "infd_directory_iter_get_next")]
		public static bool get_next (Inf.dDirectory directory, Inf.dDirectoryIter iter);
		[CCode (cname = "infd_directory_iter_get_node_type")]
		public static Inf.dStorageNodeType get_node_type (Inf.dDirectory directory, Inf.dDirectoryIter iter);
		[CCode (cname = "infd_directory_iter_get_parent")]
		public static bool get_parent (Inf.dDirectory directory, Inf.dDirectoryIter iter);
		[CCode (cname = "infd_directory_iter_get_path")]
		public static unowned string get_path (Inf.dDirectory directory, Inf.dDirectoryIter iter);
		[CCode (cname = "infd_directory_iter_get_plugin")]
		public static unowned Inf.dNotePlugin get_plugin (Inf.dDirectory directory, Inf.dDirectoryIter iter);
		[CCode (cname = "infd_directory_iter_get_prev")]
		public static bool get_prev (Inf.dDirectory directory, Inf.dDirectoryIter iter);
		[CCode (cname = "infd_directory_iter_get_root")]
		public static void get_root (Inf.dDirectory directory, Inf.dDirectoryIter iter);
		[CCode (cname = "infd_directory_iter_get_session")]
		public static unowned Inf.dSessionProxy get_session (Inf.dDirectory directory, Inf.dDirectoryIter iter) throws GLib.Error;
		[CCode (cname = "infd_directory_iter_peek_session")]
		public static unowned Inf.dSessionProxy peek_session (Inf.dDirectory directory, Inf.dDirectoryIter iter);
		[CCode (cname = "infd_directory_iter_save_session")]
		public static bool save_session (Inf.dDirectory directory, Inf.dDirectoryIter iter) throws GLib.Error;
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class dFilesystemStorage : GLib.Object, Inf.dStorage {
		[CCode (cname = "infd_filesystem_storage_new", has_construct_function = false)]
		public dFilesystemStorage (string root_directory);
		[CCode (cname = "infd_filesystem_storage_open")]
		public unowned GLib.FileStream open (string identifier, string path, string mode) throws GLib.Error;
		[NoAccessorMethod]
		public string root_directory { owned get; construct; }
	}
	[Compact]
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class dNotePlugin {
		public weak string note_type;
		public weak GLib.Callback session_new;
		public weak GLib.Callback session_read;
		public weak GLib.Callback session_write;
		public weak string storage_type;
		public void* user_data;
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class dServerPool : GLib.Object {
		[CCode (cname = "infd_server_pool_new", has_construct_function = false)]
		public dServerPool (Inf.dDirectory directory);
		[CCode (cname = "infd_server_pool_add_local_publisher")]
		public void add_local_publisher (Inf.dXmppServer server, Inf.LocalPublisher publisher);
		[CCode (cname = "infd_server_pool_add_server")]
		public void add_server (Inf.dXmlServer server);
		[CCode (cname = "infd_server_pool_foreach_server")]
		public void foreach_server (Inf.dServerPoolForeachServerFunc func);
		[CCode (cname = "infd_server_pool_remove_server")]
		public void remove_server (Inf.dXmlServer server);
		[NoAccessorMethod]
		public Inf.dDirectory directory { owned get; construct; }
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class dSessionProxy : GLib.Object, Inf.CommunicationObject {
		[CCode (cname = "infd_session_proxy_add_user")]
		public unowned Inf.User add_user (GLib.Parameter[] @params) throws GLib.Error;
		[CCode (cname = "infd_session_proxy_get_session")]
		public unowned Inf.Session get_session ();
		[CCode (cname = "infd_session_proxy_has_subscriptions")]
		public bool has_subscriptions ();
		[CCode (cname = "infd_session_proxy_is_idle")]
		public bool is_idle ();
		[CCode (cname = "infd_session_proxy_is_subscribed")]
		public bool is_subscribed (Inf.XmlConnection connection);
		[CCode (cname = "infd_session_proxy_subscribe_to")]
		public void subscribe_to (Inf.XmlConnection connection, uint seq_id, bool synchronize);
		[NoAccessorMethod]
		public bool idle { get; }
		public Inf.Session session { get; construct; }
		[NoAccessorMethod]
		public Inf.CommunicationHostedGroup subscription_group { owned get; construct; }
		public virtual signal void add_subscription (Inf.XmlConnection connection, uint seq_id);
		public virtual signal void remove_subscription (Inf.XmlConnection connection);
	}
	[Compact]
	[CCode (copy_function = "infd_storage_node_copy", free_function = "infd_storage_node_free", type_id = "INF_TYPE_DSTORAGE_NODE", cheader_filename = "libinfinity-0.5.h")]
	public class dStorageNode {
		public weak string identifier;
		public weak string name;
		public Inf.dStorageNodeType type;
		[CCode (cname = "infd_storage_node_copy")]
		public unowned Inf.dStorageNode copy ();
		[CCode (cname = "infd_storage_node_list_free")]
		public static void list_free (GLib.SList node_list);
		[CCode (cname = "infd_storage_node_new_note", has_construct_function = false)]
		public dStorageNode.note (string path, string identifier);
		[CCode (cname = "infd_storage_node_new_subdirectory", has_construct_function = false)]
		public dStorageNode.subdirectory (string path);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class dTcpServer : GLib.Object {
		[CCode (cname = "infd_tcp_server_bind")]
		public bool bind () throws GLib.Error;
		[CCode (cname = "infd_tcp_server_close")]
		public void close ();
		[CCode (cname = "infd_tcp_server_open")]
		public bool open () throws GLib.Error;
		[NoAccessorMethod]
		public Inf.Io io { owned get; construct; }
		[NoAccessorMethod]
		public Inf.IpAddress local_address { owned get; set; }
		[NoAccessorMethod]
		public uint local_port { get; set; }
		[NoAccessorMethod]
		public Inf.dTcpServerStatus status { get; }
		public virtual signal void error (void* error);
		public virtual signal void new_connection (Inf.TcpConnection connection);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public class dXmppServer : GLib.Object, Inf.dXmlServer {
		[CCode (cname = "infd_xmpp_server_new", has_construct_function = false)]
		public dXmppServer (Inf.dTcpServer tcp, Inf.XmppConnectionSecurityPolicy policy, Inf.CertificateCredentials creds, Gsasl.Context sasl_context, string sasl_mechanisms);
		[CCode (cname = "infd_xmpp_server_get_security_policy")]
		public Inf.XmppConnectionSecurityPolicy get_security_policy ();
		[CCode (cname = "infd_xmpp_server_set_security_policy")]
		public void set_security_policy (Inf.XmppConnectionSecurityPolicy policy);
		[NoAccessorMethod]
		public Inf.CertificateCredentials credentials { owned get; set construct; }
		[NoAccessorMethod]
		public string local_hostname { owned get; construct; }
		[NoAccessorMethod]
		public void* sasl_context { get; set construct; }
		[NoAccessorMethod]
		public string sasl_mechanisms { owned get; set construct; }
		public Inf.XmppConnectionSecurityPolicy security_policy { get; set construct; }
		[NoAccessorMethod]
		public Inf.dTcpServer tcp_server { owned get; construct; }
		public virtual signal void error (void* error);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public interface AdoptedOperation : GLib.Object {
		public abstract void apply (Inf.AdoptedUser by, Inf.Buffer buffer);
		public abstract unowned Inf.AdoptedOperation copy ();
		public abstract Inf.AdoptedConcurrencyId get_concurrency_id (Inf.AdoptedOperation against);
		public abstract Inf.AdoptedOperationFlags get_flags ();
		public bool is_reversible ();
		public abstract unowned Inf.AdoptedOperation make_reversible (Inf.AdoptedOperation with, Inf.Buffer buffer);
		public abstract bool need_concurrency_id (Inf.AdoptedOperation against);
		public abstract unowned Inf.AdoptedOperation revert ();
		public abstract unowned Inf.AdoptedOperation transform (Inf.AdoptedOperation against, int concurrency_id);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public interface Buffer : GLib.Object {
		public abstract bool get_modified ();
		public abstract void set_modified (bool modified);
		public bool modified { get; set; }
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public interface CommunicationFactory : GLib.Object {
		public abstract unowned Inf.CommunicationMethod instantiate (string network, string method_name, Inf.CommunicationRegistry registry, Inf.CommunicationGroup group);
		public abstract bool supports_method (string network, string method_name);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public interface CommunicationMethod : GLib.Object {
		public void add_member (Inf.XmlConnection connection);
		public abstract void cancel_messages (Inf.XmlConnection connection);
		public abstract void enqueued (Inf.XmlConnection connection, Xml.Node xml);
		public abstract bool is_member (Inf.XmlConnection connection);
		public abstract void received (Inf.XmlConnection connection, Xml.Node xml);
		public void remove_member (Inf.XmlConnection connection);
		public abstract void send_all (Xml.Node xml);
		public abstract void send_single (Inf.XmlConnection connection, Xml.Node xml);
		public abstract void sent (Inf.XmlConnection connection, Xml.Node xml);
		public signal void do_add_member (Inf.XmlConnection connection);
		public signal void do_remove_member (Inf.XmlConnection connection);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public interface CommunicationObject : GLib.Object {
		public abstract void enqueued (Inf.XmlConnection conn, Xml.Node node);
		public abstract Inf.CommunicationScope received (Inf.XmlConnection conn, Xml.Node node) throws GLib.Error;
		public abstract void sent (Inf.XmlConnection conn, Xml.Node node);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public interface Discovery : GLib.Object {
		public abstract void discover (string type);
		public void discovered (Inf.DiscoveryInfo info);
		public abstract unowned GLib.SList get_discovered (string type);
		[NoWrapper]
		public abstract unowned string info_get_service_name (Inf.DiscoveryInfo info);
		[NoWrapper]
		public abstract unowned string info_get_service_type (Inf.DiscoveryInfo info);
		public abstract void resolve (Inf.DiscoveryInfo info, Inf.DiscoveryResolvCompleteFunc complete_func, Inf.DiscoveryResolvErrorFunc error_func);
		public void undiscovered (Inf.DiscoveryInfo info);
		public signal void do_discovered (void* info);
		public signal void do_undiscovered (void* info);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public interface Io : GLib.Object {
		public abstract void* add_timeout (uint msecs, Inf.IoTimeoutFunc func, GLib.DestroyNotify notify);
		public abstract void remove_timeout (void* timeout);
		public abstract void watch (Inf.NativeSocket socket, Inf.IoEvent events, Inf.IoFunc func, GLib.DestroyNotify notify);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public interface LocalPublisher : GLib.Object {
		public abstract unowned Inf.LocalPublisherItem publish (string type, string name, uint port);
		public abstract void unpublish (Inf.LocalPublisherItem item);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public interface XmlConnection : GLib.Object {
		public abstract void close ();
		public void error (GLib.Error error);
		public abstract bool open () throws GLib.Error;
		public void received (Xml.Node xml);
		public abstract void send (Xml.Node xml);
		public void sent (Xml.Node xml);
		public string local_id { get; }
		public string network { get; }
		public string remote_id { get; }
		public Inf.XmlConnectionStatus status { get; }
		public signal void do_error (void* error);
		public signal void do_received (void* xml);
		public signal void do_sent (void* xml);
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public interface dStorage : GLib.Object {
		[CCode (cname = "infd_storage_create_subdirectory")]
		public abstract bool create_subdirectory (string path) throws GLib.Error;
		[CCode (cname = "infd_storage_read_subdirectory")]
		public abstract unowned GLib.SList read_subdirectory (string path) throws GLib.Error;
		[CCode (cname = "infd_storage_remove_node")]
		public abstract bool remove_node (string identifier, string path) throws GLib.Error;
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public interface dXmlServer : GLib.Object {
		[CCode (cname = "infd_xml_server_close")]
		public abstract void close ();
		[CCode (cname = "infd_xml_server_new_connection")]
		public void new_connection (Inf.XmlConnection connection);
		public Inf.dXmlServerStatus status { get; }
		public signal void do_new_connection (Inf.XmlConnection connection);
	}
	[CCode (cprefix = "INF_ADOPTED_CONCURRENCY_", cheader_filename = "libinfinity-0.5.h")]
	public enum AdoptedConcurrencyId {
		SELF,
		NONE,
		OTHER
	}
	[CCode (cprefix = "INF_ADOPTED_OPERATION_", cheader_filename = "libinfinity-0.5.h")]
	[Flags]
	public enum AdoptedOperationFlags {
		AFFECTS_BUFFER,
		REVERSIBLE
	}
	[CCode (cprefix = "INF_ADOPTED_REQUEST_", cheader_filename = "libinfinity-0.5.h")]
	public enum AdoptedRequestType {
		DO,
		UNDO,
		REDO
	}
	[CCode (cprefix = "INF_ADOPTED_SESSION_ERROR_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum AdoptedSessionError {
		NO_SUCH_USER,
		MISSING_OPERATION,
		INVALID_REQUEST,
		MISSING_STATE_VECTOR,
		FAILED
	}
	[CCode (cprefix = "INF_ADOPTED_SESSION_REPLAY_ERROR_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum AdoptedSessionReplayError {
		BAD_FILE,
		BAD_XML,
		BAD_DOCUMENT,
		BAD_SESSION_TYPE,
		BAD_FORMAT,
		UNEXPECTED_EOF
	}
	[CCode (cprefix = "INF_ADOPTED_STATE_VECTOR_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum AdoptedStateVectorError {
		BAD_FORMAT,
		FAILED
	}
	[CCode (cprefix = "INF_AUTHENTICATION_DETAIL_ERROR_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum AuthenticationDetailError {
		AUTHENTICATION_FAILED,
		USER_NOT_AUTHORIZED,
		TRY_AGAIN,
		SERVER_ERROR
	}
	[CCode (cprefix = "INF_CHAT_BUFFER_MESSAGE_", cheader_filename = "libinfinity-0.5.h")]
	[Flags]
	public enum ChatBufferMessageFlags {
		BACKLOG
	}
	[CCode (cprefix = "INF_CHAT_BUFFER_MESSAGE_", cheader_filename = "libinfinity-0.5.h")]
	public enum ChatBufferMessageType {
		NORMAL,
		EMOTE,
		USERJOIN,
		USERPART
	}
	[CCode (cprefix = "INF_CHAT_SESSION_ERROR_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum ChatSessionError {
		TYPE_INVALID,
		NO_SUCH_USER,
		FAILED
	}
	[CCode (cprefix = "INF_COMMUNICATION_SCOPE_", cheader_filename = "libinfinity-0.5.h")]
	public enum CommunicationScope {
		PTP,
		GROUP
	}
	[CCode (cprefix = "INF_DIRECTORY_ERROR_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum DirectoryError {
		NO_WELCOME_MESSAGE,
		VERSION_MISMATCH,
		NODE_EXISTS,
		INVALID_NAME,
		NO_SUCH_NODE,
		NO_SUCH_SUBSCRIPTION_REQUEST,
		CHAT_DISABLED,
		NOT_A_SUBDIRECTORY,
		NOT_A_NOTE,
		ROOT_NODE_REMOVE_ATTEMPT,
		ALREADY_EXPLORED,
		TOO_MUCH_CHILDREN,
		TOO_FEW_CHILDREN,
		TYPE_UNKNOWN,
		ALREADY_SUBSCRIBED,
		UNSUBSCRIBED,
		NETWORK_UNSUPPORTED,
		METHOD_UNSUPPORTED,
		UNEXPECTED_SYNC_IN,
		UNEXPECTED_MESSAGE,
		NO_STORAGE,
		FAILED
	}
	[CCode (cprefix = "INF_IO_", cheader_filename = "libinfinity-0.5.h")]
	[Flags]
	public enum IoEvent {
		INCOMING,
		OUTGOING,
		ERROR
	}
	[CCode (cprefix = "INF_IP_ADDRESS_", cheader_filename = "libinfinity-0.5.h")]
	public enum IpAddressFamily {
		IPV4,
		IPV6
	}
	[CCode (cprefix = "INF_REQUEST_ERROR_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum RequestError {
		UNKNOWN_DOMAIN,
		REPLY_UNPROCESSED,
		INVALID_SEQ,
		NO_SUCH_ATTRIBUTE,
		INVALID_NUMBER,
		FAILED
	}
	[CCode (cprefix = "INF_SESSION_", cheader_filename = "libinfinity-0.5.h")]
	public enum SessionStatus {
		PRESYNC,
		SYNCHRONIZING,
		RUNNING,
		CLOSED
	}
	[CCode (cprefix = "INF_SESSION_SYNC_ERROR_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum SessionSyncError {
		GOT_MESSAGE_IN_PRESYNC,
		UNEXPECTED_NODE,
		ID_NOT_PRESENT,
		ID_IN_USE,
		NAME_NOT_PRESENT,
		NAME_IN_USE,
		CONNECTION_CLOSED,
		SENDER_CANCELLED,
		RECEIVER_CANCELLED,
		UNEXPECTED_BEGIN_OF_SYNC,
		NUM_MESSAGES_MISSING,
		UNEXPECTED_END_OF_SYNC,
		EXPECTED_BEGIN_OF_SYNC,
		EXPECTED_END_OF_SYNC,
		FAILED
	}
	[CCode (cprefix = "INF_SESSION_SYNC_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum SessionSyncStatus {
		NONE,
		IN_PROGRESS,
		AWAITING_ACK
	}
	[CCode (cprefix = "INF_SIMULATED_CONNECTION_", cheader_filename = "libinfinity-0.5.h")]
	public enum SimulatedConnectionMode {
		IMMEDIATE,
		DELAYED
	}
	[CCode (cprefix = "INF_TCP_CONNECTION_", cheader_filename = "libinfinity-0.5.h")]
	public enum TcpConnectionStatus {
		CONNECTING,
		CONNECTED,
		CLOSED
	}
	[CCode (cprefix = "INF_USER_ERROR_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum UserError {
		NAME_IN_USE,
		ID_PROVIDED,
		NO_SUCH_USER,
		STATUS_UNAVAILABLE,
		NOT_JOINED,
		INVALID_STATUS,
		FAILED
	}
	[CCode (cprefix = "INF_USER_", cheader_filename = "libinfinity-0.5.h")]
	[Flags]
	public enum UserFlags {
		LOCAL
	}
	[CCode (cprefix = "INF_USER_", cheader_filename = "libinfinity-0.5.h")]
	public enum UserStatus {
		ACTIVE,
		INACTIVE,
		UNAVAILABLE
	}
	[CCode (cprefix = "INF_XML_CONNECTION_", cheader_filename = "libinfinity-0.5.h")]
	public enum XmlConnectionStatus {
		CLOSED,
		CLOSING,
		OPEN,
		OPENING
	}
	[CCode (cprefix = "INF_XMPP_CONNECTION_AUTH_ERROR_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum XmppConnectionAuthError {
		ABORTED,
		INCORRECT_ENCODING,
		INVALID_AUTHZID,
		INVALID_MECHANISM,
		MECHANISM_TOO_WEAK,
		NOT_AUTHORIZED,
		TEMPORARY_AUTH_FAILURE,
		FAILED
	}
	[CCode (cprefix = "INF_XMPP_CONNECTION_ERROR_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum XmppConnectionError {
		TLS_UNSUPPORTED,
		TLS_REQUIRED,
		TLS_FAILURE,
		NO_CERTIFICATE_PROVIDED,
		CERTIFICATE_NOT_TRUSTED,
		AUTHENTICATION_UNSUPPORTED,
		NO_SUITABLE_MECHANISM,
		FAILED
	}
	[CCode (cprefix = "INF_XMPP_CONNECTION_SECURITY_", cheader_filename = "libinfinity-0.5.h")]
	public enum XmppConnectionSecurityPolicy {
		ONLY_UNSECURED,
		ONLY_TLS,
		BOTH_PREFER_UNSECURED,
		BOTH_PREFER_TLS
	}
	[CCode (cprefix = "INF_XMPP_CONNECTION_", cheader_filename = "libinfinity-0.5.h")]
	public enum XmppConnectionSite {
		CLIENT,
		SERVER
	}
	[CCode (cprefix = "INF_XMPP_CONNECTION_STREAM_ERROR_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum XmppConnectionStreamError {
		BAD_FORMAT,
		BAD_NAMESPACE_PREFIX,
		CONFLICT,
		CONNECTION_TIMEOUT,
		HOST_GONE,
		HOST_UNKNOWN,
		IMPROPER_ADDRESSING,
		INTERNAL_SERVER_ERROR,
		INVALID_FROM,
		INVALID_ID,
		INVALID_NAMESPACE,
		INVALID_XML,
		NOT_AUTHORIZED,
		POLICY_VIOLATION,
		REMOTE_CONNECTION_FAILED,
		RESOURCE_CONSTRAINT,
		RESTRICTED_XML,
		SEE_OTHER_HOST,
		SYSTEM_SHUTDOWN,
		UNDEFINED_CONDITION,
		UNSUPPORTED_ENCODING,
		UNSUPPORTED_STANZA_TYPE,
		UNSUPPORTED_VERSION,
		XML_NOT_WELL_FORMED,
		FAILED
	}
	[CCode (cprefix = "INFC_BROWSER_NODE_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum cBrowserNodeStatus {
		SYNC,
		DELETED,
		ADDED,
		MOVED,
		COPIED,
		INHERIT
	}
	[CCode (cprefix = "INFC_BROWSER_", cheader_filename = "libinfinity-0.5.h")]
	public enum cBrowserStatus {
		DISCONNECTED,
		CONNECTING,
		CONNECTED
	}
	[CCode (cprefix = "INFD_FILESYSTEM_STORAGE_ERROR_", has_type_id = false, cheader_filename = "libinfinity-0.5.h")]
	public enum dFilesystemStorageError {
		INVALID_PATH,
		REMOVE_FILES,
		FAILED
	}
	[CCode (cprefix = "INFD_STORAGE_NODE_", cheader_filename = "libinfinity-0.5.h")]
	public enum dStorageNodeType {
		SUBDIRECTORY,
		NOTE
	}
	[CCode (cprefix = "INFD_TCP_SERVER_", cheader_filename = "libinfinity-0.5.h")]
	public enum dTcpServerStatus {
		CLOSED,
		OPEN
	}
	[CCode (cprefix = "INFD_XML_SERVER_", cheader_filename = "libinfinity-0.5.h")]
	public enum dXmlServerStatus {
		CLOSED,
		CLOSING,
		OPEN,
		OPENING
	}
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public delegate void AdoptedStateVectorForeachFunc (uint id, uint value);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public delegate void DiscoveryResolvCompleteFunc (Inf.DiscoveryInfo info, Inf.XmlConnection connection);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public delegate void DiscoveryResolvErrorFunc (Inf.DiscoveryInfo info, GLib.Error error);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public delegate void IoFunc (Inf.NativeSocket socket, Inf.IoEvent event);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public delegate void IoTimeoutFunc ();
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public delegate void UserTableForeachUserFunc (Inf.User user);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public delegate void XmppConnectionCrtCallback (Inf.XmppConnection xmpp, Inf.CertificateChain chain);
	[CCode (cheader_filename = "libinfinity-0.5.h", has_target = false)]
	public delegate void cRequestManagerForeachFunc (Inf.cRequest p1, void* p2);
	[CCode (cheader_filename = "libinfinity-0.5.h", has_target = false)]
	public delegate void dDirectoryForeachConnectionFunc (Inf.XmlConnection p1, void* p2);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public delegate void dServerPoolForeachServerFunc (Inf.dXmlServer server);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public const int LIBINFINITY_HAVE_AVAHI;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static GLib.Quark authentication_detail_error_quark ();
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static unowned string authentication_detail_strerror (Inf.AuthenticationDetailError code);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static void deinit ();
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static GLib.Quark directory_error_quark ();
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static unowned string directory_strerror (Inf.DirectoryError code);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static GLib.Quark gnutls_error_quark ();
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static void gnutls_set_error (int error_code) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static GLib.Quark gsasl_error_quark ();
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static void gsasl_set_error (int error_code) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static bool init () throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static unowned string protocol_get_version ();
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static bool protocol_parse_version (string version, uint major, uint minor) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static GLib.Quark request_error_quark ();
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static unowned string request_strerror (Inf.RequestError code);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static void xml_util_add_child_text (Xml.Node xml, string text, size_t bytes);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static unowned string xml_util_get_attribute (Xml.Node xml, string attribute);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static bool xml_util_get_attribute_double (Xml.Node xml, string attribute, double _result) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static bool xml_util_get_attribute_double_required (Xml.Node xml, string attribute, double _result) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static bool xml_util_get_attribute_int (Xml.Node xml, string attribute, int _result) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static bool xml_util_get_attribute_int_required (Xml.Node xml, string attribute, int _result) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static bool xml_util_get_attribute_long (Xml.Node xml, string attribute, long _result) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static bool xml_util_get_attribute_long_required (Xml.Node xml, string attribute, long _result) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static unowned string xml_util_get_attribute_required (Xml.Node xml, string attribute) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static bool xml_util_get_attribute_uint (Xml.Node xml, string attribute, uint _result) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static bool xml_util_get_attribute_uint_required (Xml.Node xml, string attribute, uint _result) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static bool xml_util_get_attribute_ulong (Xml.Node xml, string attribute, ulong _result) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static bool xml_util_get_attribute_ulong_required (Xml.Node xml, string attribute, ulong _result) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static unowned string xml_util_get_child_text (Xml.Node xml, size_t bytes, uint chars) throws GLib.Error;
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static unowned GLib.Error xml_util_new_error_from_node (Xml.Node xml);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static unowned Xml.Node xml_util_new_node_from_error (GLib.Error error, Xml.Ns name_space, string name);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static void xml_util_set_attribute (Xml.Node xml, string attribute, string value);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static void xml_util_set_attribute_double (Xml.Node xml, string attribute, double value);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static void xml_util_set_attribute_int (Xml.Node xml, string attribute, int value);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static void xml_util_set_attribute_long (Xml.Node xml, string attribute, long value);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static void xml_util_set_attribute_uint (Xml.Node xml, string attribute, uint value);
	[CCode (cheader_filename = "libinfinity-0.5.h")]
	public static void xml_util_set_attribute_ulong (Xml.Node xml, string attribute, ulong value);
}
