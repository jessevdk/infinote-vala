/* libinfgtk-0.5.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "InfGtk", lower_case_cprefix = "inf_gtk_")]
namespace InfGtk {
	[CCode (cheader_filename = "libinfgtk-0.5.h")]
	public class BrowserModelFilter : Gtk.TreeModelFilter, Gtk.TreeModel, Gtk.TreeDragSource, InfGtk.BrowserModel {
		[CCode (has_construct_function = false)]
		public BrowserModelFilter (InfGtk.BrowserModel child_model);
	}
	[CCode (cheader_filename = "libinfgtk-0.5.h")]
	public class BrowserModelSort : Gtk.TreeModelSort, Gtk.TreeModel, Gtk.TreeSortable, Gtk.TreeDragSource, InfGtk.BrowserModel {
		[CCode (has_construct_function = false)]
		public BrowserModelSort (InfGtk.BrowserModel child_model);
	}
	[CCode (cheader_filename = "libinfgtk-0.5.h")]
	public class BrowserStore : GLib.Object, Gtk.TreeModel, InfGtk.BrowserModel {
		[CCode (has_construct_function = false)]
		public BrowserStore (Inf.Io io, Inf.CommunicationManager comm_manager);
		public void add_connection (Inf.XmlConnection connection, string name);
		public void add_discovery (Inf.Discovery discovery);
		public void clear_connection_error (Inf.XmlConnection connection);
		public void remove_connection (Inf.XmlConnection connection);
		public void set_connection_name (Inf.XmlConnection connection, string name);
		[NoAccessorMethod]
		public Inf.CommunicationManager communication_manager { owned get; construct; }
		[NoAccessorMethod]
		public Inf.Io io { owned get; construct; }
	}
	[CCode (cheader_filename = "libinfgtk-0.5.h")]
	public class BrowserView : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public BrowserView ();
		public unowned InfGtk.BrowserModel get_model ();
		public bool get_selected (Gtk.TreeIter iter);
		public void set_selected (Gtk.TreeIter iter);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public BrowserView.with_model (InfGtk.BrowserModel model);
		[NoAccessorMethod]
		public InfGtk.BrowserModel model { owned get; set construct; }
		public virtual signal void activate (Gtk.TreeIter iter);
		public virtual signal void populate_popup (Gtk.Menu menu);
		public virtual signal void selection_changed (Gtk.TreeIter iter);
		public virtual signal void set_scroll_adjustments (Gtk.Adjustment hadjustment, Gtk.Adjustment vadjustment);
	}
	[CCode (cheader_filename = "libinfgtk-0.5.h")]
	public class CertificateDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public CertificateDialog (Gtk.Window parent, Gtk.DialogFlags dialog_flags, InfGtk.CertificateDialogFlags certificate_flags, string hostname, Inf.CertificateChain certificate_chain);
		[NoAccessorMethod]
		public Inf.CertificateChain certificate_chain { owned get; set; }
		[NoAccessorMethod]
		public InfGtk.InfCertificateDialogFlags certificate_flags { get; set; }
		[NoAccessorMethod]
		public string hostname { owned get; set; }
	}
	[CCode (cheader_filename = "libinfgtk-0.5.h")]
	public class CertificateManager : GLib.Object {
		[CCode (has_construct_function = false)]
		public CertificateManager (Gtk.Window parent_window, Inf.XmppManager xmpp_manager, string trust_file, string known_hosts_file);
		[NoAccessorMethod]
		public string known_hosts_file { owned get; set; }
		[NoAccessorMethod]
		public Gtk.Window parent_window { owned get; construct; }
		[NoAccessorMethod]
		public string trust_file { owned get; set; }
		[NoAccessorMethod]
		public Inf.XmppManager xmpp_manager { owned get; construct; }
	}
	[CCode (cheader_filename = "libinfgtk-0.5.h")]
	public class Chat : Gtk.VBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public Chat ();
		public unowned Inf.User get_active_user ();
		public unowned Gtk.Widget get_entry ();
		public void set_active_user (Inf.User user);
		public void set_session (Inf.ChatSession session);
		public Inf.User active_user { get; set; }
		[NoAccessorMethod]
		public Inf.ChatSession session { owned get; set; }
	}
	[CCode (cheader_filename = "libinfgtk-0.5.h")]
	public class Io : GLib.Object, Inf.Io {
		[CCode (has_construct_function = false)]
		public Io ();
	}
	[CCode (cheader_filename = "libinfgtk-0.5.h")]
	public interface BrowserModel : Gtk.TreeModel, GLib.Object {
		public abstract bool browser_iter_to_tree_iter (Inf.cBrowser browser, Inf.cBrowserIter browser_iter, Gtk.TreeIter tree_iter);
		public abstract void resolve (Inf.Discovery discovery, Inf.DiscoveryInfo info);
		public void set_browser (Gtk.TreePath path, Gtk.TreeIter iter, Inf.cBrowser browser);
		public signal void do_set_browser (Gtk.TreePath path, Gtk.TreeIter iter, Inf.cBrowser browser);
	}
	[CCode (cprefix = "INF_GTK_BROWSER_MODEL_", has_type_id = false, cheader_filename = "libinfgtk-0.5.h")]
	public enum BrowserModelColumn {
		COL_DISCOVERY_INFO,
		COL_DISCOVERY,
		COL_BROWSER,
		COL_STATUS,
		COL_NAME,
		COL_ERROR,
		COL_NODE,
		NUM_COLS
	}
	[CCode (cprefix = "INF_GTK_BROWSER_MODEL_", cheader_filename = "libinfgtk-0.5.h")]
	public enum BrowserModelStatus {
		DISCOVERED,
		RESOLVING,
		CONNECTING,
		CONNECTED,
		ERROR
	}
	[CCode (cprefix = "INF_GTK_CERTIFICATE_DIALOG_CERT_", has_type_id = false, cheader_filename = "libinfgtk-0.5.h")]
	public enum CertificateDialogFlags {
		NOT_ACTIVATED,
		EXPIRED,
		HOSTNAME_MISMATCH,
		INVALID,
		ISSUER_NOT_TRUSTED,
		CHANGED,
		OLD_EXPIRED
	}
	[CCode (cprefix = "INF_GTK_CERTIFICATE_DIALOG_CERT_", cheader_filename = "libinfgtk-0.5.h")]
	[Flags]
	public enum InfCertificateDialogFlags {
		NOT_ACTIVATED,
		EXPIRED,
		HOSTNAME_MISMATCH,
		ISSUER_NOT_TRUSTED,
		INVALID,
		CHANGED
	}
}
